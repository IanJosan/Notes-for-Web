回调地狱
多层回调函数的相互嵌套就形成回调地狱，代码耦合性强难以维护，冗余代码嵌套可读性差
通过promise解决回调地狱问题

promise是一个构造函数，可以创建一个实例
const p = new Promise()
new出来的promise实例对象p代表一个异步操作

promise的原型对象 Promise.prototype上包含一个.then()方法。每一次new Promise()构造函数得到的实例对象，都可以通过原型链的方式访问到.then()方法，例如p.then()

.then()方法的作用：用来预先指定成功和失败的回调函数
p.then(成功回调函数，失败回调函数)
p.then(result => {},error =>{})
成功回调函数必选，失败回调函数可选

基于promise的方式读取文件内容
node.js只提供了回调函数的方法读取文件，需要先安装then-fs第三方包。npm install then-fs
调用包提供的 readFile()方法，可以异步读取文件，返回值是Promise（）实例对象所以可以调用.then()方法为每个异步操作指定成功或失败的回调函数，无法保证读取顺序需要改进

.then()方法特性
如果上一个.then()方法中返回了一个新的Promise实例对象，则可以通过下一个.then()继续进行处理，通过.then()的链式调用解决回调地狱问题

在Promise的链式操作中发生错误可以使用Promise.prototype.catch方法进行捕获和处理。放在最后在发现错误后会直接跳到catch捕获所有错误错误后面的.than()不会执行

Promise.all()
Promise.all()方法会发起并行的Promise异步操作，等所有异步操作结束后才会执行下一步.then操作 读取的顺序就是拿到的最终结果顺序

Promise.rase()
Promise.rase()方法会发起并行的Promise异步操作，只要任何一个异步操作完成就会立即执行下一步的.then 操作








