在多人协作开发时为防止干扰，建议分支进行项目开发

在初始化本地git仓库时就默认创建了一个master主分支用来保存和记录整个项目已完成的功能代码，远程仓库默认叫origin

功能分支
从master主分支分叉出来的，当新功能开发测试完毕后最终需要合并到master主分支上

查看分支列表
git branch查看仓库中所有分支
*标识当前所在分支

基于当前分支创建新分支
git branch 分支名称
只会创建分支不会切换线路

切换分支
git checkout 分支名称
可以切换到指定分支上

快速创建并切换到这个分支
git checkout -b 分支名称

合并分支
先切换到主分支
git checkout master
在主分支上运行命令
git merge 分支名

删除分支
当功能分支的代码合并到主分支后就可以删掉子分支
在删除前先要跳到非这个分支上
git branch -d 分支名称

遇到冲突时的分支合并
对同一个分支进行了不同的修改就会有冲突
解决冲突后再重新提交add. 和 commit命令

将本地分支推送到远程仓库
只有在第一次推送时需要带-u参数，以后可以用git push就可以
git push -u 远程仓库名 本地仓库分支名：远程分支名
git push -u origin payment:pay
如果不需要命名则可以省略冒号后的

查看远程仓库中所有分支列表
git remote show 远程仓库名

跟踪分支
从远程仓库中，把远程分支下载到本地仓库，保持本地分支和远程分支名称相同
git checkout 远程分支名
需要重命名
git checkout -b 本地分支名称 远程仓库名称/远程分支名称

拉取远程分支最新代码
先要回到分支
git pull

删除远程仓库分支
git push 远程仓库 --delete 远程分支名


